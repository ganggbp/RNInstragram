type Like @model @auth(rules: [{ allow: public }]) {
	id: ID!
	userID: ID! @index(name: "byUser")
	postID: ID!
		@index(
			name: "byPost"
			queryField: "likesForPostByUser"
			sortKeyFields: ["userID"]
		)

	User: User @belongsTo(fields: ["userID"])
	Post: Post @belongsTo(fields: ["postID"])
}

type Comment @model @auth(rules: [{ allow: public }]) {
	id: ID!
	createdAt: AWSDateTime!
	comment: String!
	userID: ID! @index(name: "byUser")
	postID: ID!
		@index(
			name: "byPost"
			queryField: "commentsByPost"
			sortKeyFields: ["createdAt"]
		)

	User: User @belongsTo(fields: ["userID"])
	Post: Post @belongsTo(fields: ["postID"])
}

type Post @model @auth(rules: [{ allow: public }]) {
	id: ID!
	createdAt: AWSDateTime!
	type: String!
		@index(
			name: "postsByDate"
			queryField: "postsByDate"
			sortKeyFields: ["createdAt"]
		)
	description: String
	image: String
	images: [String!]
	video: String
	nofComments: Int!
	nofLikes: Int!
	userID: ID! @index(name: "byUser")
	User: User @belongsTo(fields: ["userID"])
	Likes: [Like] @hasMany(indexName: "byPost", fields: ["id"])
	Comments: [Comment] @hasMany(indexName: "byPost", fields: ["id"])
}

type User @model @auth(rules: [{ allow: public }]) {
	id: ID!
	name: String!
	email: String!
	username: String
		@index(name: "usersByUsername", queryField: "usersByUsername")
	bio: String
	website: AWSURL
	image: String
	nofFollowers: Int!
	nofFollowings: Int!
	Posts: [Post] @hasMany(indexName: "byUser", fields: ["id"])
	Comments: [Comment] @hasMany(indexName: "byUser", fields: ["id"])
	Likes: [Like] @hasMany(indexName: "byUser", fields: ["id"])
	nofPosts: Int!
}

# add @index for create a global secondary index to increase performance when filter
# when provided queryField amplify will generate this query in graphql queries
